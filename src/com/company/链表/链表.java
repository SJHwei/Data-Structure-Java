package com.company.链表;

/**
 * @author ShiWei
 * @date 2021/2/28 - 10:16
 *
 * 1. 单链表的说明:
 *    (1) 链表是以节点的方式来存储的;
 *    (2) 每个节点包含data域, next域: 指向下一个节点;
 *    (3) 链表的各个节点不一定是连续存储的;
 *    (4) 链表分带头结点的链表和没有头结点的链表, 根据实际的需求来确定.
 *
 * 2. 单链表的创建, 添加, 遍历, 修改, 删除的实现的分析:
 *    (1) head节点:
 *        1> 不存放具体的数据;
 *        2> 作用就是表示单链表头.
 *    (2) 创建:
 *        1> 创建一个head头结点, 作用就是表示单链表的头.
 *    (3) 遍历:
 *        1> 通过一个辅助变量遍历, 帮助遍历整个链表. 遍历时头结点不能动, 如果动了, 就找不到这个链表了. 其实这个头结点就标识了整个单链表.
 *    (4) 不考虑编号顺序的添加:
 *        1> 每添加一个节点, 就直接加入到链表的最后.
 *    (5) 按照编号顺序的添加:
 *        1> 首先找到新添加的节点的位置, 是通过辅助变量(指针), 通过遍历来搞定;
 *        2> 新的节点.next = temp.next;
 *        3> temp.next = 新的节点.
 *    (6) 单链表节点的修改:
 *    (7) 单链表节点的删除:
 *        1> 先找到需要删除的这个节点的前一个节点temp;
 *        2> temp.next = temp.next.next;
 *        3> 被删除的节点将不会有其他引用指向, 会被垃圾回收机制回收.
 */
public class 链表 {
}
